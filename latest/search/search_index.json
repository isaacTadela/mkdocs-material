{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#version-15","title":"Version 1.5","text":"<p>new section for v 1.5.</p>"},{"location":"#version-16","title":"Version 1.6","text":"<p>new section for v 1.6.</p>"},{"location":"#version-112","title":"Version 1.12","text":"<p>new section for v 1.12.</p>"},{"location":"#version-105","title":"Version 1.05","text":"<p>new section for v 0.5.</p>"},{"location":"#version-07","title":"Version 0.7","text":"<p>new section for v 0.7. with the new deploy pipeline.</p>"},{"location":"#version-08","title":"Version 0.8","text":"<p>new section for v 0.8. with the new deploy pipeline.</p>"},{"location":"#version-020","title":"Version 0.20","text":"<p>new section for v 0.20. with the new deploy pipeline.</p>"},{"location":"#version-021","title":"Version 0.21","text":"<p>new section for v 0.21.8 with the new deploy pipeline.</p>"},{"location":"Versioning/","title":"Versioning","text":"<p>Update files with each change:</p> <ul> <li> file ver in home directory</li> <li> CHANGES.md<ul> <li> New features</li> <li> Breaking changes</li> <li> Bug fixes</li> </ul> </li> <li> the rest of your changes</li> </ul>"},{"location":"Versioning/#configuration","title":"Configuration","text":""},{"location":"Versioning/#minimal-configuration","title":"Minimal configuration","text":"<p>Simply add the following lines to <code>mkdocs.yml</code> to enable the theme:</p> Recommended: [configuration validation and auto-complete] <p>In order to minimize friction and maximize productivity, Material for MkDocs provides its own [schema.json]<sup>1</sup> for <code>mkdocs.yml</code>. If your editor supports YAML schema validation, it's definitely recommended to set it up:</p> Visual Studio CodeOther <ol> <li>Install [<code>vscode-yaml</code>][vscode-yaml] for YAML language support.</li> <li> <p>Add the schema under the <code>yaml.schemas</code> key in your user or     workspace [<code>settings.json</code>][settings.json]:</p> <pre><code>{\n  \"yaml.schemas\": {\n    \"https://squidfunk.github.io/mkdocs-material/schema.json\": \"mkdocs.yml\"\n  },\n  \"yaml.customTags\": [ // (1)!\n    \"!ENV scalar\",\n    \"!ENV sequence\",\n    \"!relative scalar\",\n    \"tag:yaml.org,2002:python/name:material.extensions.emoji.to_svg\",\n    \"tag:yaml.org,2002:python/name:material.extensions.emoji.twemoji\",\n    \"tag:yaml.org,2002:python/name:pymdownx.superfences.fence_code_format\"\n  ]\n}\n</code></pre> <ol> <li>This setting is necessary if you plan to use [icons and emojis],     or Visual Studio Code will show errors on certain lines.</li> </ol> </li> </ol> <ol> <li>Ensure your editor of choice has support for YAML schema validation.</li> <li> <p>Add the following lines at the top of <code>mkdocs.yml</code>:</p> <pre><code># yaml-language-server: $schema=https://squidfunk.github.io/mkdocs-material/schema.json\n</code></pre> </li> </ol> <ol> <li> <p>If you're a MkDocs plugin or Markdown extension author and your project works with Material for MkDocs, you're very much invited to contribute a schema for your [extension] or [plugin] as part of a pull request on GitHub. If you already have a schema defined, or wish to self-host your schema to reduce duplication, you can add it via [$ref].\u00a0\u21a9</p> </li> </ol>"},{"location":"camero/","title":"Links","text":"<ul> <li>Linkedin.</li> <li>Ron Daisy, VP R&amp;D at Camero.</li> </ul>"},{"location":"examples/","title":"Examples for mkdocs.yml","text":"<p>Some good looking examples:</p> <ul> <li>Mkdocs-material mkdocs.yml.</li> <li>Backstage mkdocs.yml.</li> <li>Aquasecurity-trivy mkdocs.yml.</li> <li>Hatch</li> <li>Atlassian DC Helm Charts</li> </ul>"},{"location":"examples/#plugins-and-customizations","title":"Plugins and customizations","text":"<ul> <li>medium mkdocs-plugins</li> </ul>"},{"location":"examples/#reading-matireal","title":"Reading matireal","text":"<ul> <li>Kubernetes Volume Autoscaler.</li> <li>Kubernetes operators by the CNCF.</li> <li>Check Jaeger vs OpenTelemetry, Distributed Tracing Platform</li> <li>tanzu vs rancher vs openshift</li> <li>Zesty Disk for Kubernetes.</li> <li>cloud pricing.</li> </ul>"},{"location":"GIT/GIT/","title":"GIT commands and code snippet","text":""},{"location":"GIT/GIT/#how-to-clone-all-projects-of-a-group-at-once-in-gitlab","title":"How to clone all projects of a group at once in GitLab?","text":"<p>Using glab-cli</p> <pre><code># install glab-cli first\n\nglab auth login --hostname hostname.my.domain --token &lt;token&gt;\n\nglab repo clone -g &lt;group&gt; -a=false -p --paginate -G\n</code></pre> <p>Powershell run git pull over all subdirectories</p> <pre><code>Get-ChildItem -Recurse -Directory -Hidden -Filter .git | ForEach-Object { &amp; git --git-dir=\"$($_.FullName)\" --work-tree=\"$(Split-Path $_.FullName -Parent)\" pull origin master }\n</code></pre> <p>Shell one liner with curl, jq, tr <pre><code>for repo in $(curl -s --header \"PRIVATE-TOKEN: your_private_token\" https://&lt;your-host&gt;/api/v4/groups/&lt;group_id&gt; | jq -r \".projects[].ssh_url_to_repo\"); do git clone $repo; done;\n</code></pre></p>"},{"location":"GIT/GIT/#update-git-creds","title":"Update git creds","text":""},{"location":"GIT/GIT/#local-token","title":"Local token","text":"<p>update git token <pre><code>git remote -v\n\ngit remote set-url origin [repo-url]\n\n# for this repo for example is:\ngit remote set-url origin https://isaacTadela:ghp_XXXX@github.com/isaacTadela/mkdocs-material.git\n\n# for private gitlab instance:\ngit remote set-url origin https://&lt;USERNAME&gt;:ghp_XXXX@gitlab.xyz.cloud/&lt;PROJECT&gt;/&lt;REPO&gt;.git\n\ngit remote -v\n</code></pre></p>"},{"location":"GIT/GIT/#vs-code-shortcut","title":"vs code shortcut","text":"<p>Open/Close the EXPLORER Ctrl + B , Ctrl + ~</p> <p>Search file name Ctrl + P</p> <p>Scroll Ctrl + UpArrow , Ctrl + DownArrow</p> <p>Navigate to Synbols Ctrl + P , then @</p> <p>Split Editor Window Ctrl + \\</p> <p>Close Tab Ctrl + w</p> <p>Insert new line Below (\\r) Ctrl + Enter</p> <p>selecrt all maching text for rename Ctrl + Shift + L</p> <p>duplicate line down Shift + Alt + DownArrow</p> <p>moving line Alt + DownArrow, Alt + UpArrow</p> <p>keyboard shortcut for Git Sync, by default there is none so you need to add it</p> <p>git.sync  - Ctrl + Shift + Enter git.push    - ??</p> <p>git.undoCommit - Ctrl + Shift + PageDown</p> <pre><code>sequenceDiagram\n  par Local changes\n  Working directory -&gt;&gt; Stash: stash your changes\n  Stash -&gt;&gt; Working directory: apply your changes\n  Working directory -&gt;&gt; Staging directory: add to index\n  Staging directory -&gt;&gt; Local Repo: commit your changes\n  end\n  Remote Repo --&gt;&gt; Local Repo: fetch from remote\n  Local Repo -&gt;&gt; Working directory: checkout branches\n  Local Repo -&gt;&gt; Working directory: merge and rebase branches\n  Remote Repo --&gt;&gt; Working directory: pull from remote</code></pre>"},{"location":"esp32/code/","title":"ESP32 Code snippets","text":""},{"location":"esp32/code/#mac-address-table","title":"MAC address table","text":"<ul> <li>1 - e0:5a:1b:a1:a9:08</li> <li>2 - e0:5a:1b:a0:e3:c0</li> <li>3 - e0:5a:1b:a1:14:f4</li> <li>4 - e0:5a:1b:a1:19:54</li> <li>ayaso - 304b:47:e4:c2</li> <li>isaac e8:d1:1b:72:6c:70</li> </ul>"},{"location":"esp32/code/#global-declaration-and-functions","title":"Global declaration and functions","text":"<pre><code>#define membersByMAC 5\n// #define MAC2STR(a) (a)[0], (a)[1], (a)[2], (a)[3], (a)[4], (a)[5]\n// #define MACSTR   \"%02x:%02x:%02x:%02x:%02x:%02x\"\n// %x - hex value\n\nstatic char temp_mac[20] = {'/0'};\n// sprintf(buffer, \"%02x:%02x:%02x:%02x:%02x:%02x\", 1.2345, 78, 0.874568);\n\n\n// Arrays for saved UIDs\nconst uint8_t savedMAC[membersByMAC][7] = {\n  { 0xe0, 0x5a, 0x1b, 0xa1, 0xa9, 0x08, 1},\n  { 0xe0, 0x5a, 0x1b, 0xa0, 0xe3, 0xc0, 2},\n  { 0xe0, 0x5a, 0x1b, 0xa1, 0x14, 0xf4, 3},\n  { 0xe0, 0x5a, 0x1b, 0xa1, 0x19, 0x54, 4},\n  { 0xe8, 0xd1, 0x1b, 0x72, 0x6c, 0x70, 100}\n};\n\nint compareMac(uint8_t* mac_addr) {\n  int i,j = 0;\n  for(i=0; i &lt; membersByMAC; i++){\n    for(j=0; j &lt; 6; j++){\n      if (savedMAC[i][j] != mac_addr[j]) break;\n    }\n    if(j==6)return savedMAC[i][j];\n  }\n\n  return 0;\n}\n</code></pre> <p>use inside a function</p> <pre><code>char buf[256];\nsprintf(buf,\"%02x:%02x:%02x:%02x:%02x:%02x\",MAC2STR(my_mac) );\n\nESP_LOGI(MESH_TAG, \" My MAC is \"MACSTR\", aka: %d, my parent MAC is \"MACSTR\" aka: %d , and im a %s \",\n                    MAC2STR(my_mac),\n                    compareMac(my_mac),\n                    MAC2STR(mesh_parent_addr.addr),\n                    compareMac(mesh_parent_addr.addr ),\n                    (is_mesh_connected &amp;&amp; esp_mesh_is_root()) ? \"ROOT\" : is_mesh_connected ? \"NODE\" : \"DISCONNECT\");\n</code></pre> <p>inside the main function</p> <pre><code>/*  retrieve the MAC address of the WiFi interface  */\n    ESP_ERROR_CHECK( esp_wifi_get_mac(ESP_IF_WIFI_STA, my_mac) );\n</code></pre>"},{"location":"esp32/esp32/","title":"ESP32","text":"<pre><code>cd \"%userprofile%\\myWork\\project\\portfolio\\csi\\ESP32-CSI-Collection-and-Display\\active_ap\"\n\nidf.py set-target esp32\n\nidf.py menuconfig\n\nidf.py -p COM5 build flash monitor\n\nidf.py monitor -B 115200\n</code></pre>"},{"location":"esp32/esp32/#links","title":"Links","text":"<p>search dataset of wifi esp32</p> <p>github.com/espressif/esp-csi.</p> <p>Marsrocky/Awesome-WiFi-CSI-Sensing.</p> <p>rfpose.csail.mit.edu/.</p> <p>Zhao_Through-Wall_Human_Pose_CVPR_2018_paper.pdf.</p>"},{"location":"esp32/esp32/#csi_send","title":"csi_send","text":"<pre><code>cd esp-csi/examples/get-started/csi_send\n\nidf.py set-target esp32\n\nidf.py flash -b 921600 -p /dev/ttyUSB0 monitor\n\nidf.py flash -b 921600 monitor -p COM5\n</code></pre>"},{"location":"esp32/esp32/#console_test","title":"console_test","text":"<pre><code>cd esp-csi/examples/console_test\n\nidf.py set-target esp32\n\n# idf.py flash -b 921600 -p /dev/ttyUSB1\n\nidf.py flash -b 921600 monitor -p COM5\n</code></pre>"},{"location":"esp32/esp32/#console_testtools","title":"console_test\\tools","text":"<pre><code>cd examples/esp-radar/console_test/tools/\n\npip install -r requirements.txt\n\npython esp_csi_tool.py -p COM5\n</code></pre>"},{"location":"esp32/esp32/#wifi-mesh-example","title":"wifi mesh example","text":"<p>Offical Docs. writing an esp wifi mesh application. code exmaple - internal_communication.</p>"},{"location":"esp32/esp32/#node-mac-name-parent-child","title":"Node # - MAC - name - parent - child","text":"<ul> <li>1 - e0:5a:1b:a1:a9:08 - Node1 - XXXXX - AAA, BBB , CCC</li> <li>2 - e0:5a:1b:a0:e3:c0 - Node2 - XXXXX - AAA, BBB , CCC</li> <li>3 - e0:5a:1b:a1:14:f4 - Node3 - XXXXX - AAA, BBB , CCC</li> <li>4 - e0:5a:1b:a1:19:54 - Node4 - XXXXX - AAA, BBB , CCC</li> </ul> filter monitor output<pre><code>idf.py monitor --print_filter mesh_main\n</code></pre>"},{"location":"esp32/esp32/#broadcast","title":"Broadcast??","text":""},{"location":"esp32/esp32/#companys","title":"Companys","text":"<ul> <li>emerald.</li> <li>xkcorp.</li> </ul>"},{"location":"esp32/esp32/#esp-mesh-lite","title":"ESP-MESH-LITE","text":"<p>Offical doc. examples - no_router. ESP-MESH-LITE is a Wi-Fi networking application of IoT-Bridge, based on the SoftAP + Station mode, a set of Mesh solutions built on top of the Wi-Fi protocol. ESP-MESH-LITE allows numerous devices (henceforth referred to as nodes) spread over a large physical area (both indoors and outdoors) to be interconnected under a single WLAN (Wireless Local-Area Network). The biggest difference between ESP-MESH-LITE and ESP-MESH (also known as ESP-WIFI-MESH) is that ESP-MESH-LITE allows sub-devices in the network to independently access the external network, and the transmission information is insensitive to the parent node, which greatly reduces the difficulty to develop the application layer. ESP-MESH-LITE is self-organizing and self-healing, which means the network can be built and maintained autonomously.</p> <p>Enumerations wifi mode like WIFI_MODE_STA ,WIFI_MODE_AP or WIFI_MODE_APSTA.</p>"},{"location":"esp32/esp32/#esp-now","title":"ESP NOW","text":"<p>ESP-NOW: A Game Changer for ESP32 Mesh Networks and Sensor Applications. \"ESP-NOW is a wireless communication protocol defined by Espressif, which enables the direct, quick and low-power control of smart devices, without the need of a router....\"</p> <p>GitHub repo with ESP-NOW based mesh network Building an ESP-NOW-based Mesh Network with ESP32.</p> <p>ESP-NOW with ESP32: Receive Data from Multiple Boards (many-to-one)</p>"},{"location":"esp32/node/","title":"Every node requirement","text":""},{"location":"esp32/node/#mesh-characteristics","title":"Mesh characteristics","text":"<p>Self-organized networking is a feature of ESP-WIFI-MESH where nodes can autonomously scan/select/connect/reconnect to other nodes and routers. This feature allows an ESP-WIFI-MESH network to operate with high degree of autonomy by making the network robust to dynamic network topologies and conditions</p>"},{"location":"esp32/node/#transmitter-tx","title":"Transmitter (Tx)","text":"<ol> <li>Send it's MAC addresses</li> </ol>"},{"location":"esp32/node/#receiver-rx","title":"Receiver (Rx)","text":"<ul> <li> <p>This is the important part containing the csi change we are looking</p> </li> <li> <p>Print the incoming messages</p> </li> </ul>"},{"location":"esp32/node/#code-snips","title":"Code snips","text":"<ol> <li>hold the table for all the mesh members</li> <li>ping interval should be calc according to number of members in the mesh</li> </ol>"},{"location":"esp32/node/#notes","title":"notes?","text":"<p>i need many Tx and 1 Rx to get all the csi data from everyone?? i can filter it by the TAG</p>"},{"location":"helm/page1/","title":"Helmfile","text":"<p>https://helmfile.readthedocs.io/en/latest/ https://github.com/helmfile/helmfile</p>"},{"location":"helm/page1/#helm-diff","title":"helm-diff","text":"<p>A helm plugin that shows a diff explaining what a helm upgrade would change https://github.com/databus23/helm-diff</p> <p><code>mike deploy --update-aliases 0.1.5 latest --push</code></p>"},{"location":"history/CHANGELOG/","title":"Hatch history","text":"<p>All notable changes to Hatch will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"history/CHANGELOG/#unreleased","title":"Unreleased","text":"<p>Added:</p> <ul> <li>Add <code>self report</code> command for submitting pre-populated bug reports to GitHub</li> <li>The reserved environment used for static analysis is now completely configurable</li> <li>Add the following methods to the <code>environment</code> interface for complete control over output during life cycle management: <code>app_status_creation</code>, <code>app_status_pre_installation</code>, <code>app_status_post_installation</code>, <code>app_status_project_installation</code>, <code>app_status_dependency_state_check</code>, <code>app_status_dependency_installation_check</code>, <code>app_status_dependency_synchronization</code></li> <li>Add binaries for 32-bit versions of Windows</li> <li>Read configuration from any <code>~/.pypirc</code> file for the <code>index</code> publisher</li> <li>Use the Git user as the default username for new project URL metadata</li> <li>Add <code>HATCH_DEBUG</code> environment variable that when enabled will show local variables in the case of unhandled tracebacks</li> <li>Upgrade default CPython distributions to 20240224</li> <li>Upgrade Ruff to 0.3.1</li> <li>Upgrade PyApp to 0.15.1 for binary builds</li> <li>Bump the minimum supported version of Hatchling to 1.22.2</li> </ul> <p>Fixed:</p> <ul> <li>When projects derive dependencies from metadata hooks, there is now by default a status indicator for when the hooks are executed for better responsiveness</li> <li>Fix dependency inheritance for the template of the <code>types</code> environment for new projects</li> </ul>"},{"location":"history/CHANGELOG/#194-2024-03-12","title":"1.9.4 - 2024-03-12","text":"<p>Fixed:</p> <ul> <li>Limit the maximum version of Hatchling in anticipation of backward incompatible changes</li> </ul>"},{"location":"history/CHANGELOG/#hatch-v1.9.3","title":"1.9.3 - 2024-01-25","text":"<p>Fixed:</p> <ul> <li>Fix loading of local plugins to account for newly released versions of a dependency</li> </ul>"},{"location":"history/CHANGELOG/#hatch-v1.9.2","title":"1.9.2 - 2024-01-21","text":"<p>Fixed:</p> <ul> <li>Fix the default token variable name for publishing to PyPI</li> </ul>"},{"location":"history/CHANGELOG/#hatch-v1.9.1","title":"1.9.1 - 2023-12-25","text":"<p>Fixed:</p> <ul> <li>Ensure that the <code>dependency_hash</code> method of the <code>environment</code> interface is called after <code>sync_dependencies</code> for cases where the hash is only known at that point, such as for dependency lockers</li> <li>Only acknowledge the <code>HATCH_PYTHON_VARIANT_*</code> environment variables for Python resolution for supported platforms and architectures</li> <li>Fix Python resolution when there are metadata hooks with unsatisfied dependencies</li> </ul>"},{"location":"reference/APIs/","title":"APIs","text":"<p>changes after sha 38fd924</p>"},{"location":"reference/APIs/#new-changes","title":"New changes","text":""},{"location":"reference/APIs/#change-after-38fd924","title":"Change after 38fd924","text":"<ol> <li>test stay-on-the-same-page-when-switching-versions</li> </ol>"},{"location":"reference/APIs/#change-after-71e84b7","title":"Change after 71e84b7","text":"<ol> <li> <p>update pages name by their title.</p> </li> <li> <p>test mkdocs-git-committers-plugin.</p> </li> </ol>"},{"location":"reference/APIs/#change-after-4dea605","title":"Change after 4dea605","text":"<ol> <li>version 0.8</li> </ol>"},{"location":"reference/APIs/#change-after-72de89f","title":"Change after 72de89f","text":"<ol> <li>the CI auto version bump and deploy is Working starting version 0.7</li> </ol>"},{"location":"reference/APIs/#change-after-5f17656","title":"Change after 5f17656","text":"<ol> <li>the CI is Working starting version 0.6</li> </ol>"},{"location":"reference/APIs/#change-after-63ff3fc","title":"Change after 63ff3fc","text":"<ol> <li> <p>added CHANGES.md .</p> </li> <li> <p>under markdown_extensions added   \\       <code>def_list</code></p> </li> <li> <p>push to remote by running <code>mike deploy --push --update-aliases 0.4 latest</code>.     and go to the site [isaactadela.github.io]</p> </li> </ol>"},{"location":"reference/APIs/#change-after-b05b275","title":"Change after b05b275","text":"<ol> <li> <p>update this page.</p> </li> <li> <p>push locally and run <code>mike deploy --update-aliases 0.4 latest</code>. then run <code>mike serve</code> to see the changes.</p> </li> <li> <p>push to remote by running <code>mike deploy --push --update-aliases 0.4 latest</code>.       and go to the site isaactadela.github.io.</p> </li> </ol>"},{"location":"reference/Test/","title":"Test","text":"<p>testing new version 0.12 latest.</p>"},{"location":"reference/page0.4/","title":"New Page for V0.4","text":""},{"location":"reference/page0.4/#this-is-another-page","title":"This is another page","text":"<p>testing for the versioning.</p>"},{"location":"reference/page0.7/","title":"New Page for V0.7","text":""},{"location":"reference/page0.7/#this-is-another-page-for-version-07","title":"This is another page for version 0.7","text":"<p>for local development use:</p> mkdocs.yml<pre><code>npm run start\n</code></pre> <p>for remote deployment run:</p> mkdocs.yml<pre><code>mike deploy --push --update-aliases 0.6 latest\n</code></pre> <p>link to doc in the offical site squidfunk.github.io.</p>"},{"location":"snippets/provider-aws-access/","title":"Provider aws access","text":""},{"location":"snippets/provider-aws-access/#aws-authentication","title":"AWS Authentication","text":""},{"location":"snippets/provider-aws-access/#controllers-pod-identity","title":"Controller's Pod Identity","text":"<p>Note: If you are using Parameter Store replace <code>service: SecretsManager</code> with <code>service: ParameterStore</code> in all examples below.</p> <p>This is basicially a zero-configuration authentication method that inherits the credentials from the runtime environment using the aws sdk default credential chain.</p> <p>You can attach a role to the pod using IRSA, kiam or kube2iam. When no other authentication method is configured in the <code>Kind=Secretstore</code> this role is used to make all API calls against AWS Secrets Manager or SSM Parameter Store.</p> <p>Based on the Pod's identity you can do a <code>sts:assumeRole</code> before fetching the secrets to limit access to certain keys in your provider. This is optional.</p> <pre><code>apiVersion: external-secrets.io/v1beta1\nkind: SecretStore\nmetadata:\n  name: team-b-store\nspec:\n  provider:\n    aws:\n      service: SecretsManager\n      region: eu-central-1\n      # optional: do a sts:assumeRole before fetching secrets\n      role: team-b\n</code></pre>"},{"location":"snippets/provider-aws-access/#access-key-id-secret-access-key","title":"Access Key ID &amp; Secret Access Key","text":"<p>You can store Access Key ID &amp; Secret Access Key in a <code>Kind=Secret</code> and reference it from a SecretStore.</p> <pre><code>apiVersion: external-secrets.io/v1beta1\nkind: SecretStore\nmetadata:\n  name: team-b-store\nspec:\n  provider:\n    aws:\n      service: SecretsManager\n      region: eu-central-1\n      # optional: assume role before fetching secrets\n      role: team-b\n      auth:\n        secretRef:\n          accessKeyIDSecretRef:\n            name: awssm-secret\n            key: access-key\n          secretAccessKeySecretRef:\n            name: awssm-secret\n            key: secret-access-key\n</code></pre> <p>NOTE: In case of a <code>ClusterSecretStore</code>, Be sure to provide <code>namespace</code> in <code>accessKeyIDSecretRef</code>, <code>secretAccessKeySecretRef</code> with the namespaces where the secrets reside.</p>"},{"location":"snippets/provider-aws-access/#eks-service-account-credentials","title":"EKS Service Account credentials","text":"<p>This feature lets you use short-lived service account tokens to authenticate with AWS. You must have Service Account Volume Projection enabled - it is by default on EKS. See EKS guide on how to set up IAM roles for service accounts.</p> <p>The big advantage of this approach is that ESO runs without any credentials.</p> <pre><code>apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/team-a\n  name: my-serviceaccount\n  namespace: default\n</code></pre> <p>Reference the service account from above in the Secret Store:</p> <pre><code>apiVersion: external-secrets.io/v1beta1\nkind: SecretStore\nmetadata:\n  name: secretstore-sample\nspec:\n  provider:\n    aws:\n      service: SecretsManager\n      region: eu-central-1\n      auth:\n        jwt:\n          serviceAccountRef:\n            name: my-serviceaccount\n</code></pre> <p>NOTE: In case of a <code>ClusterSecretStore</code>, Be sure to provide <code>namespace</code> for <code>serviceAccountRef</code> with the namespace where the service account resides.</p>"},{"location":"snippets/provider-aws-access/#custom-endpoints","title":"Custom Endpoints","text":"<p>You can define custom AWS endpoints if you want to use regional, vpc or custom endpoints. See List of endpoints for Secrets Manager, Secure Systems Manager and Security Token Service.</p> <p>Use the following environment variables to point the controller to your custom endpoints. Note: All resources managed by this controller are affected.</p> ENV VAR DESCRIPTION AWS_SECRETSMANAGER_ENDPOINT Endpoint for the Secrets Manager Service. The controller uses this endpoint to fetch secrets from AWS Secrets Manager. AWS_SSM_ENDPOINT Endpoint for the AWS Secure Systems Manager. The controller uses this endpoint to fetch secrets from SSM Parameter Store. AWS_STS_ENDPOINT Endpoint for the Security Token Service. The controller uses this endpoint when creating a session and when doing <code>assumeRole</code> or <code>assumeRoleWithWebIdentity</code> calls."}]}